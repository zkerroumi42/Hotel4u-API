import { ReservationService } from 'src/reservations/reservation.service';
import { HotelService } from 'src/hotels/hotel.service';
import { CommentService } from 'src/comments/comment.service';
import { UsersService } from 'src/users/users.service';
import { CreateMessageDto } from 'src/messages/dto/create-message.dto';
import { Message } from 'src/messages/entities/message.entity';
import { MessageService } from 'src/messages/message.service';
import { CreateUserDto } from 'src/users/dto/create.user.dto';
import { User } from 'src/users/entities/user.entity';
import { Comment } from 'src/comments/entities/comment.entity';
import { IAuthenticate } from 'src/auth/interface/Role';
import { AuthenticateDto } from 'src/auth/dto/authenticate.dto';
import { CreateCommentDto } from 'src/comments/dto/create-comment.dto';
import { Reservation } from 'src/reservations/entities/reservation.entity';
import { CreateReservationDto } from 'src/reservations/dto/create-reservation.dto';
import { PaymentService } from 'src/payment/payment.service';
import { CreatePaymentDto } from 'src/payment/dto/create-payment.dto';
import { Payment } from 'src/payment/entities/payment.entity';
import { AuthService } from 'src/auth/auth.service';
export declare class HomeController {
    private readonly messageService;
    private readonly hotelService;
    private readonly reservationService;
    private readonly commentService;
    private readonly usersService;
    private readonly paymentService;
    private readonly authService;
    constructor(messageService: MessageService, hotelService: HotelService, reservationService: ReservationService, commentService: CommentService, usersService: UsersService, paymentService: PaymentService, authService: AuthService);
    getByville(ville: string): Promise<import("../hotels/entities/hotel.entity").Hotel[]>;
    getByVilleAndType(ville: string, type: string): Promise<import("../hotels/entities/hotel.entity").Hotel[]>;
    getByBudget(minBudget: number, maxBudget: number): Promise<import("../hotels/entities/hotel.entity").Hotel[]>;
    create(createMessageDto: CreateMessageDto): Promise<Message>;
    getByid(id: number): Promise<Message>;
    readBySourceId(id: number): Promise<Message[]>;
    register(createUserDto: CreateUserDto): Promise<User>;
    login(authenticateDto: AuthenticateDto): Promise<IAuthenticate>;
    findAll(): Promise<Comment[]>;
    getByidd(id: number): Promise<Comment>;
    commenter(createCommentDto: CreateCommentDto): Promise<Comment>;
    update(id: number, updateCommentDto: CreateCommentDto): Promise<Comment>;
    delete(id: number): Promise<Comment>;
    reserver(createReservationDto: CreateReservationDto): Promise<Reservation>;
    annuler(id: number): Promise<Reservation>;
    payer(createPaymentDto: CreatePaymentDto): Promise<Payment>;
}
